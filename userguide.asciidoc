= RobustIRC User Guide =
:numbered:
:toc: right

== Motivation ==

== High-level Overview ==

[[failure_modes]]
=== Failure Modes ===

This chapter describes how RobustIRC behaves when faced with various failure
scenarios. We assume that each RobustIRC node is running on a different
machine, ideally on a different physical machine, as otherwise a failure of the
host machine will lead to not only a single-node failure, but a multiple-node
failure.

The number of nodes necessary to establish quorum depends on the number of
nodes in the network. As an example, in a 3-node network, you need floor(n/2)+1
= 2 nodes to reach quorum. In a 5-node network, you need floor(n/2)+1 = 3 nodes
to reach quorum.

==== Node Failures ====

Node failure means the node does not reply to heartbeats anymore. This could
happen for example because the server process gets killed, because the machine
is powered off, because the machine drops off the network, or many other
reasons.

In case the node was a *follower*, clients which were receiving messages from
that node (GetMessages request) need to connect to a different node before they
can receive any new messages. How long the clients need to realize that the
node has failed depends on the specific failure mode. In the worst case, clients
will timeout a connection after not receiving any data for 1 minute.

In case the node was the *leader*, the previous paragraph also applies.
Additionally, clients will not be able to send new messages until a new leader
is elected. Depending on the network configuration, this typically takes
between 5 and 10 seconds, provided that there are enough nodes that a quorum
can be established. If there are not, the network will remain frozen/read-only
until enough nodes are available.

==== Network Partition ====

Network partition means that some link becomes unavailable, for example because
a physical cable is removed, and the network is partitioned into multiple
parts.

In case the link between the client and any given server within the network
becomes unavailable, the client will just switch to a different server
transparently. Direct contact to the current leader is not required, since
followers will proxy requests for the client when necessary.

In case the link between servers becomes unavailable, the previous section
(„Node Failures“) applies for the server which now became unavailable. In case
the RobustIRC network is structured in such a way that a single link
unavailability affects multiple servers, the problem may be more severe: if the
servers within each network partition cannot reach quorum, the network is
frozen. As an example, in a network with 2 nodes each in 2 datacenters, the
network must freeze when the connection between data centers becomes
unavailable. However, if you had 5 nodes, you would need at least two such link
failures at the same time to be unable to reach quorum.

== Network Performance ==

=== Latency ===

TODO(secure): add latency measurements and explanation

== Clients ==

=== Bridge ===

The RobustIRC bridge is a program which bridges between the RobustIRC protocol and standard IRC footnote:[As defined per RFC2812.].

Depending on where the bridge runs, you get two benefits:

1. You can connect to a RobustIRC network with your IRC client of choice.
   Typically, RobustIRC networks will provide a bridge. The recommended
   hostname is `legacy-irc.<networkname>`, e.g. `legacy-irc.robustirc.net`.

2. If the connection between the bridge and your IRC client is stable,
   single-server unavailability and network partitions will be handled
   transparently by the bridge. See <<failure_modes>> for details on the
   failure modes. To get a stable connection to your bridge, you typically need
   to run the bridge on the same machine as your IRC client.

==== SOCKS5 ====

When running a bridge on the same machine as your IRC client, you’d run it
using `robustirc-bridge -socks=localhost:1080` and then configure
`localhost:1080` as the SOCKS5 proxy address to use for connecting to a network
in your IRC client.

.WeeChat
--------------------------------------------------------------------------------
TODO: describe how to set up weechat with SOCKS5 proxy
--------------------------------------------------------------------------------

==== IRC proxy ====

In case your IRC client does either not support SOCKS5 at all or does not
support per-network proxy configuration (e.g. irssi), you can use the bridge in
IRC proxy mode. The downside is that you need to run one bridge instance per
RobustIRC network you want to connect to.

After starting the bridge with `robustirc-bridge -network=<network>`, you can
configure `localhost:6667` as IRC server in your client.

.Starting the bridge in IRC proxy mode
--------------------------------------------------------------------------------
robustirc-bridge -network=robustirc.net
--------------------------------------------------------------------------------

.irssi: Connecting to the configured network
--------------------------------------------------------------------------------
/network add robustirc
/server add -auto -network robustirc localhost 6667
/connect robustirc
--------------------------------------------------------------------------------

== Server Configuration ==

=== Docker ===

You can use the official
https://registry.hub.docker.com/u/robustirc/robustirc/[docker container
“robustirc/robustirc”] that we provide.

We run one of our servers on CoreOS, which provides quite a restricted
environment, so we describe that setup in the hope that you can easily adapt
it.

In the example systemd service file below, `/media/persistent` is the path on
which we have mounted our persistent storage. We use it to load the TLS
key/certificate from and store the RobustIRC state.

Furthermore, the node runs on the public port `60667`, which reminds of the
conventional `6667` IRC port, but is in the dynamic range. Via `-peer_addr`,
the node’s public address is provided to RobustIRC. This is necessary as docker
uses a private network within the container.

The first read-only mounted volumes are necessary so that RobustIRC can use the
system CA certificates. The path(s) you need to mount are different depending
on your operating system. See
http://golang.org/src/crypto/x509/root_unix.go#L11 for the paths which Go
checks. Some operating systems use symlinks in these locations, so make sure
you mount all the necessary volumes.

.systemd service file for starting RobustIRC in Docker
--------------------------------------------------------------------------------
[Unit]
Description=RobustIRC
After=docker.service
Requires=docker.service

[Service]
# Always pull the latest version (bleeding edge).
ExecStartPre=/usr/bin/docker pull robustirc/robustirc:latest
ExecStart=/usr/bin/docker run \
  -v /etc/ssl:/etc/ssl:ro \
  -v /usr/share/ca-certificates:/usr/share/ca-certificates:ro \
  -v /media/persistent:/media/persistent:ro \
  -v /media/persistent/robustirc:/var/lib/robustirc \
  -p :60667:443 \
  robustirc/robustirc:latest \
    -tls_cert_path=/media/persistent/ssl/combined.crt \
    -tls_key_path=/media/persistent/ssl/robustirc.net.startssl.key \
    -network_password=<secret> \
    -network_name=robustirc.net \
    -peer_addr=dock0.robustirc.net:60667

[Install]
WantedBy=multi-user.target
--------------------------------------------------------------------------------
